{"version":3,"sources":["Form.js","Label.js","CreateView.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleNameChange","bind","handleNricChange","handleGenderChange","handleDOBChange","handleNationalityChange","event","this","onChange","name","target","value","nric","gender","date","dob","nationality","Grid","container","spacing","item","xs","sm","TextField","id","label","variant","fullWidth","utils","DateFnsUtils","disableFuture","clearable","format","select","MenuItem","key","React","Component","QRCode","require","dateFns","DateFnsAdapter","Label","generate","info","lines","qr","addData","JSON","stringify","make","qrWidth","getModuleCount","canvas","canvasRef","current","ctx","getContext","save","font","height","Math","max","width","restore","translate","renderTo2dContext","i","length","fillText","style","overflow","float","position","ref","border","CreateView","handleFormChange","handleGenerate","handlePrint","createRef","state","Date","now","change","setState","clearRect","render","img","toDataURL","console","log","a","window","open","document","write","onload","print","close","onPrint","classes","Fragment","Paper","className","paper","Typography","align","Button","color","onClick","withStyles","theme","root","flexGrow","title","padding","margin","textAlign","palette","text","secondary","withTheme","App","handlePrintDone","CssBaseline","AppBar","Toolbar","exact","path","startIcon","Container","maxWidth","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.73f27940.chunk.js","sourcesContent":["import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\nclass Form extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handleNricChange = this.handleNricChange.bind(this);\r\n    this.handleGenderChange = this.handleGenderChange.bind(this);\r\n    this.handleDOBChange = this.handleDOBChange.bind(this);\r\n    this.handleNationalityChange = this.handleNationalityChange.bind(this);\r\n  }\r\n\r\n  // Change Handlers\r\n\r\n  handleNameChange(event) {\r\n    this.props.onChange({name: event.target.value});\r\n  }\r\n\r\n  handleNricChange(event) {\r\n    this.props.onChange({nric: event.target.value});\r\n  }\r\n\r\n  handleGenderChange(event) {\r\n    this.props.onChange({gender: event.target.value});\r\n  }\r\n  \r\n  handleDOBChange(date) {\r\n    this.props.onChange({dob: date});\r\n  }\r\n\r\n  handleNationalityChange(event) {\r\n    this.props.onChange({nationality: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField \r\n                id=\"input-name\" \r\n                label=\"Name\" \r\n                variant=\"standard\" \r\n                fullWidth \r\n                onChange={this.handleNameChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField \r\n                id=\"input-nric\" \r\n                label=\"NRIC/FIN\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                onChange={this.handleNricChange}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={3}>\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  fullWidth\r\n                  disableFuture\r\n                  variant=\"inline\"\r\n                  label=\"Date of Birth\"\r\n                  clearable\r\n                  value={this.props.dob}\r\n                  onChange={date => this.handleDOBChange(date)}\r\n                  format=\"dd/MM/yyyy\"\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </Grid>\r\n            <Grid item xs={12} sm={3}>\r\n              <TextField \r\n                select\r\n                id=\"input-gender\" \r\n                label=\"Gender\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                value={this.props.gender}\r\n                onChange={this.handleGenderChange}\r\n              >\r\n                <MenuItem key=\"M\" value=\"M\">Male</MenuItem>\r\n                <MenuItem key=\"F\" value=\"F\">Female</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField \r\n                id=\"input-nationality\" \r\n                label=\"Nationality\"\r\n                variant=\"standard\"\r\n                fullWidth\r\n                onChange={this.handleNationalityChange}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport DateFnsAdapter from \"@date-io/date-fns\";\r\nconst QRCode = require('qrcode-generator');\r\n\r\nconst dateFns = new DateFnsAdapter();\r\n\r\nclass Label extends React.Component {\r\n\r\n  render() {\r\n\r\n    if (this.props.generate) {\r\n      const info = {\r\n        name: this.props.name,\r\n        nric: this.props.nric,\r\n        dob: dateFns.format(this.props.dob, \"dd MMM yyyy\"),\r\n        gender: this.props.gender,\r\n        nationality: this.props.nationality,\r\n      };\r\n\r\n      const lines = [\r\n        \"Name: \" + info.name,\r\n        \"NRIC/FIN: \" + info.nric,\r\n        \"DOB: \" + info.dob,\r\n        \"Gender: \" + info.gender,\r\n        \"Nationality: \" + info.nationality\r\n      ];\r\n\r\n      const padding = 10;\r\n      const textSize = 20;\r\n      const textLineSpace = 15;\r\n      const qrScale = 3;\r\n      const qrSpace = 10;\r\n      const textBlockHeight = 5*textSize + 4*textLineSpace;\r\n      const qr = QRCode(0,'H');\r\n      qr.addData(JSON.stringify(info));\r\n      qr.make();\r\n      const qrWidth = qr.getModuleCount()*qrScale;\r\n\r\n      const canvas = this.props.canvasRef.current;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      ctx.save();\r\n      ctx.font = \"bold \" + textSize + \"px Arial\";\r\n      canvas.height = Math.max(qrWidth, textBlockHeight) + 2*padding;\r\n      \r\n      //const textBlockWidth = Math.max(...lines.map(i => ctx.measureText(i).width));\r\n      //canvas.width = qrWidth + qrSpace + textBlockWidth + 2*padding;\r\n      canvas.width = 600;\r\n      ctx.restore();\r\n      \r\n\r\n      // QR Code\r\n      ctx.save();\r\n      ctx.translate(padding, (canvas.height-qrWidth)/2);\r\n      qr.renderTo2dContext(ctx, qrScale);\r\n      ctx.restore();\r\n\r\n      // Field labels\r\n      ctx.save();\r\n      ctx.translate(padding + qrWidth + qrSpace, (canvas.height-textBlockHeight+0.5*textSize)/2+padding);\r\n      ctx.font = \"bold \" + textSize + \"px Arial\";\r\n      for (var i=0; i<lines.length; i++) {\r\n        ctx.fillText(lines[i], 0, i*(textSize+textLineSpace));\r\n      }\r\n      ctx.restore();\r\n\r\n    }\r\n\r\n    const divStyle={\r\n      overflow: 'scroll',\r\n      width:'100%',\r\n      float: 'left',\r\n      position:'relative'\r\n    };\r\n\r\n    return (\r\n      <div style={divStyle}>\r\n        <canvas ref={this.props.canvasRef}\r\n                style={{border: \"dashed 1px black\"}}\r\n                id=\"labelCanvas\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Label","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport { withStyles} from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport PrintIcon from '@material-ui/icons/Print';\r\n\r\nimport Form from './Form'\r\nimport Label from './Label';\r\n\r\nconst styles = theme => ({ root: {\r\n                  flexGrow: 1,\r\n                },\r\n                title: {\r\n                  flexGrow: 1,\r\n                },\r\n                container: {\r\n                  padding: theme.spacing(2),\r\n                },\r\n                paper: {\r\n                  margin: theme.spacing(2),\r\n                  padding: '20px',\r\n                  textAlign: 'center',\r\n                  color: theme.palette.text.secondary,\r\n                }\r\n});\r\n\r\nclass CreateView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleFormChange = this.handleFormChange.bind(this);\r\n    this.handleGenerate = this.handleGenerate.bind(this);\r\n    this.handlePrint = this.handlePrint.bind(this);\r\n    this.canvasRef = React.createRef();\r\n\r\n    this.state = {\r\n      generate: false,\r\n      name: '',\r\n      nric: '',\r\n      dob: Date.now(),\r\n      gender: 'M',\r\n      nationality: ''\r\n    };\r\n  }\r\n\r\n  handleFormChange(change) {\r\n    change.generate=false;\r\n    this.setState(change);\r\n  }\r\n\r\n  handleGenerate() {\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    this.setState({generate: true});\r\n    this.render();\r\n  }\r\n\r\n  handlePrint() {\r\n    const canvas = this.canvasRef.current;\r\n    const img = canvas.toDataURL(\"image/png\");\r\n    console.log(img);\r\n    var a = window.open('', 'Print', 'height=500, width=500'); \r\n    a.document.write('<img src=\"'+ img +'\"/>');\r\n    a.onload = ()=>a.print();\r\n    a.document.close();\r\n    this.props.onPrint()\r\n  }\r\n\r\n  render()\r\n  {\r\n    const {classes} = this.props;\r\n    \r\n    return (\r\n      <React.Fragment>\r\n        <Paper className={classes.paper}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h5\" align=\"left\">\r\n                Personal Particulars\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Form classes={this.props} onChange={this.handleFormChange} {...this.state} />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button \r\n                variant=\"contained\"\r\n                color=\"primary\" \r\n                onClick={this.handleGenerate}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n        <Paper className={classes.paper}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h5\" align=\"left\">\r\n                Preview\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Label canvasRef={this.canvasRef} {...this.state}/>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </React.Fragment>\r\n  );}\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(CreateView);\r\n","import React from 'react';\n\nimport {BrowserRouter as Router,\n        Switch,\n        Link,\n       Route} from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { withStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport PrintIcon from '@material-ui/icons/Print';\n\nimport CreateView from './CreateView';\nimport { formatDistanceStrictWithOptions } from 'date-fns/fp';\n\nconst styles = theme => ({ root: {\n                  flexGrow: 1,\n                },\n                title: {\n                  flexGrow: 1,\n                },\n                container: {\n                  padding: theme.spacing(2),\n                },\n                paper: {\n                  margin: theme.spacing(2),\n                  padding: '20px',\n                  textAlign: 'center',\n                  color: theme.palette.text.secondary,\n                }\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handlePrint = this.handlePrint.bind(this);\n    this.handlePrintDone = this.handlePrintDone.bind(this);\n\n    this.state = {\n      print: false,\n    };\n  }\n\n  handlePrint() {\n    this.setState({print: true});\n  }\n\n  handlePrintDone() {\n    this.setState({print: false});\n  }\n\n  render()\n  {\n    const {classes} = this.props;\n    \n    return (\n    <Router>\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Swab Labeller\n          </Typography>\n          <Switch>\n            <Route exact path=\"/\">\n              <Button color=\"inherit\" startIcon={<PrintIcon />} onClick={this.handlePrint}>Print</Button>\n            </Route>\n          </Switch>\n        </Toolbar>\n      </AppBar>\n      <Container className={classes.container} maxWidth=\"md\">\n        <Switch>\n          <Route path=\"/scan\">\n            {<h1>Test</h1>}\n          </Route>\n          <Route path=\"/\">\n            <CreateView />\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n    </Router>\n  );}\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles, {withTheme: true})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}